 -*- text -*-
Time-stamp: <Fri Oct 26 15:12:04 BST 2001>

   XMakemol has successfully been compiled on DEC (Compaq), FreeBSD,
GNU/Linux, HP/UX, SGI and SUN platforms. If you are using something
different then there may be problems with include files and libraries.
If you port XMakemol to another platform you might like to inform me
of the changes that you have made so that they can be incorporated
into the distribution.

Basic Installation
==================

   These are generic installation instructions. Instructions specific
to XMakemol can be found at the end of this document.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, a file
`config.cache' that saves the results of its tests to speed up
reconfiguring, and a file `config.log' containing compiler output
(useful mainly for debugging `configure').

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If at some point `config.cache'
contains results you don't want to keep, you may remove or edit it.

   The file `configure.in' is used to create `configure' by a program
called `autoconf'.  You only need `configure.in' if you want to change
it or regenerate `configure' using a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package.

  4. Type `make install' to install the programs and any data files and
     documentation.

  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the `env' program, you can do it like this:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not supports the `VPATH'
variable, you have to compile the package for one architecture at a time
in the source code directory.  After you have installed the package for
one architecture, use `make distclean' before reconfiguring for another
architecture.

Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=PATH' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

   There may be some features `configure' can not figure out
automatically, but needs to determine by the type of host the package
will run on.  Usually `configure' can figure that out, but if it prints
a message saying it can not guess the host type, give it the
`--host=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name with three fields:
     CPU-COMPANY-SYSTEM

See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the host type.

   If you are building compiler tools for cross-compiling, you can also
use the `--target=TYPE' option to select the type of system they will
produce code for and the `--build=TYPE' option to select the type of
system on which you are compiling the package.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Operation Controls
==================

   `configure' recognizes the following options to control how it
operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`configure' also accepts some other, not widely useful, options.

Motif
=====

   XMakemol uses the Motif widget set. If the Motif libraries are not
available from your vendor, then the GNU freeware ones (LessTif) work
well. The file lesstif.README at your local GNU mirror site should
contain up-to-date information. The canonical GNU site is:
ftp://ftp.gnu.org/pub/gnu.

   If the configure script is not able to locate your Motif libraries
automatically, try supplying switches `--with-motif-includes=DIR' and
`--with-motif-libraries=DIR'.

Picture File Formats
====================

   XMakemol can generate picture files of the molecules shown on the
screen. There are two picture file formats available; the pictures can
be saved as either Encapsulated PostScript (EPS) or as X Pixel Map
Image File format (XPM). Use of XPM file format is essential in
generating animated gifs.

   The support for the XPM file format is provided via the libXpm
library. You can get libXpm from ftp://ftp.x.org/contrib/libraries.
When configuring XMakemol, the configure script tries to locate the
libXpm library for you. If that fails and you still want to include
support for the XPM file format then try supplying switches
`--with-xpm-includes=DIR' and ``--with-xpm-libraries=DIR'.

OpenGL and Stereo Graphics
==========================

   Depending on platform, XMakemol can be made to work with either
OpenGL or Mesa graphics libraries. Both libraries provide XMakemol
with enhanced three-dimensional graphics with lights and true
three-dimensional graphics primitives. Use of the libraries is however
optional and XMakemol is fully functional without either of the
libraries.

   XMakemol displays three-dimensional graphics using a Motif widget
which must be installed in order to use the OpenGL or Mesa libraries.
The configure script tries to locate the widget for you automatically.
If you have installed the widget to a non-standard directory, you
should invoke the configure script with the `--with-glw=DIR' option.
The directory specified with the switch should refer to widget's root
directory from where both the include files and libraries are found.

   XMakemol supports both red/blue and SGI TOP stereo modes. Both
stereo modes work with OpenGL or Mesa graphics only. Furthermore, the
SGI stereo mode is only available on Silicon Graphics workstations
such as O2 and it requires some extra hardware.

   The red/blue stereo mode is available at all times whereas the SGI
stereo mode (TOP) has to be enabled separately. To enable the SGI
stereo mode, issue `export CFLAGS=-DSGI_STEREO' for Bourne style
shells or `setenv CFLAGS -DSGI_STEREO' for C-Shells before invoking
the configure script.

Compiling XMakemol on SGI
=========================

   Apparently there is a bug in automake 1.5 which makes XMakemol
re-compile itself each time SGI make is invoked. If possible, use GNU
make for compiling XMakemol on SGI so that the software is not
compiled many times over. Alternatively, invoke `make install' right
after the configure script so that XMakemol is both compiled and
installed once and for all.

Installing and Compiling XMakemol by Editing Makefiles
======================================================

   XMakemol tries to adapt itself to your operating system and to your
hardware automatically. This is rather new in XMakemol and it is not
guaranteed to work on all environments. In case the automatic
configuration process fails, here are some instructions for compiling
XMakemol by editing Makefiles:

(1) Copy Makefile.orig to Makefile.

(2) Edit the Makefile, specifically looking for 'Configure'.  These
    are at points where changes are likely to be needed.  The location
    of the external file 'elements' must be specified; if gif support
    is required, then various binaries must be available and their
    locations specified, too.  The compiler options come next, so
    uncomment according to platform.  It is recommended that you
    compile XMakemol with GCC, if available.

(3) See if anything needs defining or undefining in config.h,
    according to whether or not certain functions are available.

(4) Type make, which if there are no problems will create a binary
    called xmakemol.

(5) Set the XM_ELEMENTS environment variable to point to the elements
    file (or the directory containing it) if you do not want to use
    the default file. If the default file is not found, then the
    program also checks the current working directory before giving
    up.
